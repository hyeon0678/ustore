<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ustore.pos.dao.PosDao">

		<!-- 현재 멤버쉽 이용 회원 리스트 불러오기 -->
		<select id="posMember" resultType="com.ustore.member.dto.MemberDto">
			   SELECT m.member_idx , m.name ,m.contact_num, mg.grade, c2.common_type 
			   FROM members m
			   LEFT JOIN member_grade mg ON m.grade_idx = mg.grade_idx
			   LEFT JOIN common c2 ON m.member_type = c2.common_idx 
			   WHERE m.member_state = (SELECT c.common_idx FROM common c WHERE common_type='등록된 회원')
		</select>
		
		<!-- 현재 멤버쉽 이용 회원 리스트 검색 -->
		<select id="memberSearch" resultType="com.ustore.member.dto.MemberDto">
			SELECT m.member_idx , m.name ,m.contact_num, mg.grade, c2.common_type 
			FROM members m
			LEFT JOIN member_grade mg ON m.grade_idx = mg.grade_idx
			LEFT JOIN common c2 ON m.member_type = c2.common_idx 
			WHERE m.member_state = (SELECT c.common_idx FROM common c WHERE common_type='등록된 회원')
			<if test="searchText != ''">
				<if test="selectedOption == 'name'">	  	
			   	 AND m.name =#{searchText}
		  		</if>
		  		<if test="selectedOption == 'contact_num'">
				AND m.contact_num LIKE CONCAT('%', #{searchText})
				</if>
			</if>
		</select>
		
		<!-- pos 상품 리스트 불러오기 -->
		<select id="posItem" resultType="com.ustore.pos.dto.PosDto">
			   SELECT p.product_id ,p.product_name ,FORMAT(p.selling_price,0) AS selling_price ,FORMAT(p.stock,0)AS stock FROM products p WHERE p.stock != 0
		</select>
		
		<!-- pos 회원 장바구니 리스트 불러오기 -->
		<select id="posCart" resultType="com.ustore.pos.dto.PosDto">
			SELECT c.quantity , FORMAT(p.selling_price,0) AS selling_price, p.product_name, p.product_id,FORMAT(p.selling_price * c.quantity,0)AS selling_sum  
			FROM  products p
			LEFT JOIN payment_cart c ON c.product_id = p.product_id
			WHERE c.member_id = #{param1}
		</select>
		
		<!-- pos 회원이 장바구니 변경/업데이트 -->
		<update id="updateCart">
			UPDATE payment_cart SET quantity =#{quantity} WHERE member_id =#{memberId} AND product_id =#{productId}
		</update>
		
		<!-- pos 회원이 장바구니 담기 -->
		<insert id="posCartInsert">
			INSERT INTO payment_cart (product_id,member_id,quantity) VALUES (#{productId},#{memberId},#{quantity})
		</insert>
		
		<!-- pos 장바구나 담기 취소 -->
		<delete id="deleteCart">
			DELETE FROM payment_cart WHERE member_id =#{memberId} AND product_id = #{productId}
		</delete>
		
		<!-- pos 수량 여부 확인 -->
		<select id="selQuantity" resultType="int">
			SELECT stock FROM products p2 WHERE product_id =#{productId}
		</select>

		<!-- pos 장바구니 동일 제품 여부 확인 -->
		<select id="selInsert" resultType="String">
			SELECT payment_cart_idx FROM payment_cart pc WHERE member_id =#{memberId} AND product_id =#{productId}
		</select>
		
		<!-- pos 물품 검색 -->
		<select id="productSearch" resultType="com.ustore.pos.dto.PosDto">
			SELECT p.product_id ,p.product_name ,FORMAT(p.selling_price,0) AS selling_price  ,FORMAT(p.stock,0)AS stock FROM products p WHERE p.stock != 0			
			<if test="searchText != ''">
				<if test="selectedOption == 'productName'">
				AND product_name = #{searchText}
				</if>
				<if test="selectedOption == 'productId'">
				AND product_id = #{searchText}
				</if>
			</if>
		</select>
		
		<!-- 결제 모달창 정보 가져오기 -->
		<select id="payModal" resultType="com.ustore.pos.dto.PosDto">
			SELECT
			    m.name,
			    tp.total_point,
			    m.expiry_date,
			    mg.accumulation_rate,
			    SUM(p.selling_price * pc.quantity) AS selling_sum,
			    (SUM(p.selling_price * pc.quantity)-
			    SUM(
			        CASE WHEN p.point_enabled = 'N'
			             THEN p.selling_price * pc.quantity
			             ELSE 0
			        END
			    )) AS up_point
			FROM
			    members m
			LEFT JOIN
			    total_point tp ON m.member_idx = tp.member_idx
			LEFT JOIN
			    payment_cart pc ON m.member_idx = pc.member_id
			LEFT JOIN
			    products p ON pc.product_id = p.product_id
			LEFT JOIN 
			member_grade mg ON m.grade_idx = mg.grade_idx 
			WHERE
			    m.member_idx = #{memberId}
		</select>
		
		<!-- 결제 포인트 적립 한도 검색 -->
		<select id="payPoint" resultType="int">
			SELECT mg.max_points FROM members m LEFT JOIN member_grade mg ON m.grade_idx = mg.grade_idx WHERE m.member_idx =#{memberId}
		</select>
		
		<!-- 멤버쉽 기간 충천 포인트 검색 -->
		<select id="datePoint" resultType="int">
			SELECT COALESCE(SUM(p.earned_points), 0)  
			FROM members m LEFT JOIN payments p ON m.member_idx = p.member_id 
			WHERE m.member_idx =#{param1} AND p.payment_status = #{param2} 
			AND p.payment_date BETWEEN m.create_date AND m.expiry_date
		</select>
</mapper>
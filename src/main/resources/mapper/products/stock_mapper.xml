<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ustore.products.dao.StockDao">




<select id="list" resultType="StockDto">

	SELECT product_id,product_name,stock,unit_quantity FROM products order by product_id asc;
	
</select>
<select id="stock_insert" resultType="String">


SELECT product_id
FROM products
WHERE product_id LIKE CONCAT(#{proNum}, '%')
ORDER BY product_id DESC
LIMIT 1

</select>


<insert id="stock_insert2" parameterType="StockDto">
INSERT
	INTO
	products (
    product_id,
	product_name,
	purchase_price,
	selling_price,
	unit_quantity,
	stock,
	category_id,
	point_enabled,
	reg_date,
	reg_by
)
VALUES (
    #{productId},
    #{productName},
    #{purchasePrice},
    #{sellingPrice},
    #{unitQuantity},
    0,
#{categoryId},
    CASE
	WHEN category_id = '01' THEN 'N'
	ELSE 'Y'
END,
    NOW(),
    #{regBy})
</insert>

<delete id="stockManagementDelete" parameterType="String">
        DELETE FROM products
        WHERE product_id = #{productId}
    </delete>

<select id="stockDetailList" resultType="StockDto">
SELECT p.*, c.category_name
FROM products p
JOIN category c ON p.category_id = c.category_id
WHERE p.product_id = #{productId}
</select>

<update id="stockDetailpuUpdate" parameterType="StockDto">
    UPDATE products 
    SET 
        purchase_price = #{purchasePrice},
        selling_price = purchase_price * 1.3,  
        update_by = #{updateBy} 
    WHERE product_id = #{productId}
</update>

<update id="stockDetailunUpdate" parameterType="StockDto">
UPDATE products Set unit_quantity = #{unitQuantity}, update_by = #{updateBy} WHERE product_id =#{productId}
</update>
<update id="finalStock" parameterType="StockDto">
update products Set stock = #{finalminQuantity} where product_id=#{productId}
</update>
<insert id="stockHistoryInsert" parameterType="StockDto">
INSERT INTO stock_history (product_id, operation_type, reason, quantity, price, reg_date, reg_by)
VALUES (
    #{productId},
    #{operationType},
    #{reason},
    #{quantity},
    (SELECT purchase_price * quantity FROM products WHERE product_id = #{productId}),
    NOW(),
    #{regBy}
);
</insert>
<select id="minQuantity" resultType="int">
select stock from products where product_id = #{productId}
</select>
<select id="stockHistoryList" resultType="StockDto">
select reg_date,operation_type,quantity,reason from stock_history where product_id =#{productId}
</select>

<select id="incomingList" resultType="OrderDto">
  SELECT DISTINCT 
    `order`.exp_arrival_date, 
    `order`.order_idx,
    delivery_driver.driver_name,
    resource.resource_name
FROM `order`
JOIN delivery_driver ON `order`.driver_idx = delivery_driver.driver_idx
JOIN order_detail ON `order`.order_idx = order_detail.order_idx
JOIN driver_schedule ON delivery_driver.driver_idx = driver_schedule.driver_idx
JOIN resource ON driver_schedule.resource_idx = resource.resource_idx
WHERE order_detail.conf_status = 'N'
ORDER BY `order`.order_idx DESC;
</select>

<select id="incomModalList" resultType="OrderDto">
SELECT
    od.order_idx,
    od.product_id,
    od.quantity,
    p.product_name,
    p.unit_quantity,
    od.conf_status
FROM
    order_detail od
JOIN
    products p ON od.product_id = p.product_id
WHERE
    od.order_idx = #{orderIdx}

</select>
<update id="incomingModalUpdate" parameterType="StockDto">
UPDATE order_detail
SET conf_status = 'Y'
WHERE order_idx = #{orderIdx} and product_id =#{productId}

</update>

<update id="addProductQuantity" parameterType="StockDto">
UPDATE products
SET stock = stock + #{quantity}
WHERE product_id = #{productId}
</update>

<select id="allOffSelect" resultType="StockDto">

SELECT *
FROM order_detail
WHERE order_idx = #{orderIdx} AND conf_status = 'N'
</select>
<select id="drvierSelect" resultType="int">

select driver_idx from `order` where order_idx = #{orderIdx}
</select>
<select id="dateIdx" resultType="String">
select exp_arrival_date from `order`where order_idx = #{orderIdx}
</select>
<update id="driverDelete" parameterType="OrderDto">
update driver_schedule set  delivery_check = 'N' where driver_idx = #{driverIdx} and delivery_date = #{expArrivalDate}
</update>

<select id="addIncomingList" resultType="OrderDto">
SELECT od.receipt_date, od.quantity, p.unit_quantity
FROM order_detail od
JOIN products p ON od.product_id = p.product_id
WHERE od.product_id = #{productId} AND od.conf_status = 'Y'
</select>
<select id="calendarList" resultType="OrderDto">

SELECT DISTINCT `order`.exp_arrival_date, `order`.order_idx, delivery_driver.car_num, delivery_driver.driver_name
FROM `order`
JOIN delivery_driver ON `order`.driver_idx = delivery_driver.driver_idx
JOIN order_detail ON `order`.order_idx = order_detail.order_idx
WHERE order_detail.conf_status = 'N'
  AND `order`.exp_arrival_date BETWEEN #{firstDate} AND #{lastDate}

</select>



</mapper>
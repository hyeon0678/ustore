<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ustore.chat.dao.ChatDao">


<insert id="insertChatRoom" 
	useGeneratedKeys="true"
	keyProperty="chatRoomIdx" keyColumn="chat_room_idx">
	INSERT INTO chat_rooms (chat_room_name, is_individual, reg_by)
	VALUES(#{chatRoomName}, #{isIndividual}, #{regBy});
</insert>

<insert id="insertChatParticipants">
	INSERT INTO chat_participants (chat_room_idx, emp_idx)
	VALUES(#{param1}, #{param2});
</insert>

<select id="selectChatRoomList" resultType="chatRoomDto">
	SELECT cr.chat_room_idx, cr.chat_room_name, cr.is_individual,
	(SELECT MAX(csh.chat_date) 
        FROM chat_sent_history csh
        WHERE csh.chat_room_idx = cp.chat_room_idx) AS max_sent_date,
    (SELECT MAX(csh.chat_date)
        FROM chat_sent_history csh 
        LEFT OUTER JOIN chat_received_history crh 
        ON crh.chat_room_idx = csh.chat_room_idx  
        WHERE crh.chat_room_idx = cp.chat_room_idx) AS max_received_date,
	(SELECT COUNT(crh.`read`) 
		FROM chat_received_history crh
		WHERE crh.chat_room_idx = cp.chat_room_idx and crh.receiver like #{param1} and crh.`read` like 'N') read_cnt
	FROM  chat_participants cp 
	LEFT OUTER JOIN chat_rooms cr
	ON cp.chat_room_idx = cr.chat_room_idx 
	WHERE cp.emp_idx = #{param1}
</select>

<select id="selectChatParticipants" resultType="Participant">
	SELECT e2.emp_name AS name, c.common_type AS position, d.dept_name AS department, e2.emp_idx 
	,CONCAT(e2.emp_name,'(',d.dept_name,c.common_type,')') AS emp_info
	FROM chat_participants cp 
	LEFT OUTER JOIN employee e2 
	ON cp.emp_idx = e2.emp_idx
	LEFT OUTER JOIN department d 
	ON e2.dept_id = d.dept_id 
	LEFT OUTER JOIN common c 
	ON e2.`position` = c.common_idx 
	WHERE cp.chat_room_idx = #{param1}
</select>

<select id="selectReceiveMember" resultType="String">
	SELECT cp.emp_idx 
	FROM chat_participants cp 
	WHERE cp.chat_room_idx = #{param1} AND cp.emp_idx NOT LIKE #{param2}
</select>

<select id="selectParticipants" resultType="Participant">
	SELECT cp.emp_idx, e.emp_name AS name, d.dept_name AS department,CONCAT(e.emp_name,'(',d.dept_name,c.common_type,')') AS empInfo
	FROM chat_participants cp 
	LEFT OUTER JOIN employee e
	ON cp.emp_idx = e.emp_idx
	LEFT OUTER JOIN department d
	ON e.dept_id = d.dept_id
	LEFT OUTER JOIN common c
	ON e.position = c.common_idx
	WHERE cp.chat_room_idx = #{param1}
</select>

<select id="selectUser" resultType="Participant">
	SELECT cp.emp_idx, e.emp_name AS name, d.dept_name AS department,CONCAT(e.emp_name,'(',d.dept_name,c.common_type,')') AS empInfo
	FROM chat_participants cp 
	LEFT OUTER JOIN employee e
	ON cp.emp_idx = e.emp_idx
	LEFT OUTER JOIN department d
	ON e.dept_id = d.dept_id
	LEFT OUTER JOIN common c
	ON e.position = c.common_idx
	WHERE cp.chat_room_idx = #{param1}
</select>

<select id="selectUserInfo" resultType="String">
	SELECT CONCAT(e.emp_name,'(',d.dept_name,c.common_type,')')
	FROM employee e
	LEFT OUTER JOIN department d
	ON e.dept_id = d.dept_id
	LEFT OUTER JOIN common c
	ON e.position = c.common_idx
	WHERE e.emp_idx = #{param1}
</select>

<insert id="insertSendMsg"
	useGeneratedKeys="true"
	keyProperty="chatIdx" keyColumn="chat_idx">
	INSERT INTO chat_sent_history(sender,chat_room_idx,chat_content, chat_date)
	VALUES(#{sender},#{roomNum},#{data}, #{sendDate});
</insert>

<insert id="insertReceivedMsg">
	insert into chat_received_history (chat_idx,chat_room_idx,receiver,`read`)
	values(#{chatIdx},#{roomNum},#{receiver},#{read});
</insert>

<select id="selectChatHistory" resultType="ChatDto">
SELECT emp_name, data, send_date, sender
FROM (
	(SELECT CONCAT(e2.emp_name,'(',d.dept_name,' ',c.common_type,')') AS emp_name, csh.chat_content AS data, csh.chat_date AS send_date , csh.sender AS sender 
		FROM chat_sent_history csh 
		LEFT OUTER JOIN employee e2 
		ON csh.sender = e2.emp_idx 
		LEFT OUTER JOIN department d
		ON d.dept_id = e2.dept_id
		LEFT OUTER JOIN common c
		ON c.common_idx = e2.position
		WHERE csh.chat_room_idx = #{param1} AND csh.sender like #{param2})
		UNION 
	(SELECT 
		(SELECT CONCAT(sub_e.emp_name,'(',sub_d.dept_name,' ',sub_c.common_type,')')
			FROM employee sub_e
			LEFT OUTER JOIN department sub_d
			ON sub_d.dept_id = sub_e.dept_id
			LEFT OUTER JOIN common sub_c
			ON sub_c.common_idx = sub_e.`position` 
			where sub_e.emp_idx like csh.sender) AS emp_name, csh.chat_content AS data, csh.chat_date AS send_date , csh.sender AS sender 
		FROM chat_received_history crh 
		LEFT OUTER JOIN chat_sent_history csh
		ON crh.chat_room_idx = csh.chat_room_idx 
		LEFT OUTER JOIN employee e
		ON crh.receiver = e.emp_idx 
		LEFT OUTER JOIN department d
		ON d.dept_id = e.dept_id
		LEFT OUTER JOIN common c
		ON c.common_idx = e.position
		WHERE csh.chat_room_idx = #{param1} AND crh.receiver like #{param2})
	) AS chatting
ORDER BY chatting.send_date;
</select>

<delete id="deleteParticipants">
	DELETE
	FROM chat_participants
	WHERE chat_room_idx = #{param1} AND  emp_idx = #{param2}
</delete>
<sql id="updateRead">
	UPDATE chat_received_history
	SET `read` ='Y'
</sql>
<update id="updateToRead">
	<include refid="updateRead"/>
	WHERE chat_room_idx = #{param1} AND receiver = #{param2}
</update>

<update id="setRead">
	UPDATE chat_received_history
	SET `read` ='Y'
	WHERE chat_room_idx = #{param1} AND chat_idx = #{param1} AND receiver = #{param3} 
</update>

<select id="unReadUser" resultType="String">
SELECT  crh.receiver 
FROM chat_received_history crh 
LEFT OUTER JOIN chat_sent_history csh
ON csh.chat_idx = crh.chat_idx 
WHERE csh.chat_room_idx = #{param1} AND csh.chat_idx = #{param2} AND crh.`read` like 'N';
</select>

</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ustore.request.dao.RequestDao">

<!-- 결제 정보 저장 -->
<insert id="pay">
	INSERT INTO payments (payment_id ,member_id, iamport_idx, payment_status, earned_points, used_points, actual_amount, payments_type, payment_title,remain_points)
	VALUES (#{merchant_uid},#{memberId},#{imp_uid},#{paymentStatus},#{endPoint},#{pointText},#{paid_amount},#{paymentsType},#{name},#{remainPoints})
</insert>

<!-- 토탈 포인트 테이블 보유시 업데이트 -->
<update id="updatePoints">
	UPDATE total_point SET total_point =#{param1} WHERE member_idx =#{param2}
</update>

<!-- 카트 정보 가져오기 -->
<select id="payCart" resultType="com.ustore.pos.dto.PosDto">
	SELECT pc.product_id , pc.quantity, p2.selling_price FROM payment_cart pc LEFT JOIN products p2 ON pc.product_id =p2.product_id 
	WHERE member_id = #{param1}
</select>

<!-- 결제 상세 값 넣기 -->
<insert id="inPaymentsDetail">
		INSERT INTO payments_detail (payment_id, product_id, selling_price, quantity)
		 VALUES
	<foreach collection="list" item="item" separator=",">
       (#{merchant_uid}, #{item.productId}, #{item.sellingPrice}, #{item.quantity})
	</foreach>
</insert>

<!-- 재고 감소 -->
<update id="stockDown">
	UPDATE products SET stock =((SELECT stock FROM products WHERE product_id =#{param1})-#{param2}) WHERE product_id =#{param1}
</update>

<!-- 장바구니 초기화 -->
<delete id="delCart">
	DELETE FROM payment_cart WHERE member_id = #{param1}
</delete>

<!-- 환불처리 -->
<update id="refund">
	UPDATE payments SET payment_status =#{param2} WHERE iamport_idx =#{param1}
</update>

<!-- 결제 상세 가져오기 -->
<select id="refundPaymentsDetail" resultType="com.ustore.pos.dto.PosDto">
	SELECT pd.product_id ,pd.quantity FROM payments_detail pd 
	LEFT JOIN payments p ON pd.payment_id =p.payment_id 
	WHERE p.iamport_idx =#{param1}
GROUP BY pd.product_id ,pd.quantity
</select>

<!-- 환불 재고 상승 -->
<update id="stockUp">
	UPDATE products SET stock =((SELECT stock FROM products WHERE product_id =#{param1})+#{param2}) WHERE product_id =#{param1}
</update>

<!-- 환불 포인트 검색 -->
<select id="refundPointSelect" resultType="map">
	SELECT p2.earned_points,p2.member_id,p2.used_points FROM payments p2 WHERE p2.iamport_idx =#{param1}
</select>

<!-- 포인트 감소 -->
<update id="refundUpdatePoint">
	UPDATE total_point SET total_point =((SELECT total_point WHERE member_idx=#{member_id})-#{earned_points}+#{used_points}) WHERE member_idx =#{member_id}
</update>
</mapper>
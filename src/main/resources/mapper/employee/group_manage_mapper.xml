<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ustore.employee.dao.GroupManageDao">
	<insert id="insertEmp" parameterType="EmployeeDto">
		INSERT INTO employee (
			emp_idx, dept_id, emp_pw, emp_ext_no, emp_emergency_phone,
    		emp_phone, emp_zipcode, emp_roadAddr, emp_detailAddr, emp_name,
    		emp_gender, emp_birth, position, reg_by)
		VALUES(
			#{empIdx}, #{deptId}, #{empPw}, #{empExtNo}, #{empEmergencyPhone}, 
			#{empPhone}, #{empZipcode}, #{empRoadAddr}, #{empDetailAddr}, #{empName}, 
			#{empGender}, #{empBirth}, #{position}, #{regBy}
		) 
	</insert>
	<select id="selectMaxEmpIdx" resultType="String">
		SELECT MAX(emp_idx) FROM employee;
	</select>
	<insert id="insertEducation" parameterType="EmployeeDto">
		INSERT INTO education(emp_idx, education, school_name, major, reg_by)
		VALUES(#{empIdx}, #{education}, #{schoolName}, #{major}, #{regBy})
	</insert>
	
	<select id="employeeInfo" resultType="EmployeeDto">
		SELECT 
		    e.emp_idx,
		    e.emp_email,
		    e.emp_ext_no,
		    e.emp_emergency_phone,
		    e.emp_phone,
		    e.emp_join_date,
		    e.emp_birth,
		    e.emp_gender,
		    e.emp_zipcode,
		    e.emp_roadAddr,
		    e.emp_detailAddr,
		    e.emp_name,
		    e.reg_date,    
		    e.emp_quit,
		    e.emp_quit_date,
		    u.education,
		    u.school_name,
		    u.major ,
		    d.dept_name,
    		c.common_type AS positionType,
    		f.new_file_name,
    		f.extension,
		    SUM(COALESCE(al.leave_incdec, 0)) AS leave_incdec
		FROM 
		    employee e
		INNER JOIN
		    department d ON e.dept_id = d.dept_id
		INNER JOIN
		common c ON e.position = c.common_idx
		LEFT JOIN 
		education u ON e.emp_idx = u.emp_idx 
		LEFT JOIN 
		annual_leave al ON e.emp_idx = al.emp_idx
		LEFT JOIN
		file f ON e.emp_idx = f.conn_idx
		WHERE
		  e.emp_idx = #{param1}
		   GROUP BY
		    e.emp_idx, 
		    e.emp_email, 
		    e.emp_ext_no,
		    e.emp_emergency_phone, 
		    e.emp_phone,
		    e.emp_join_date,
		    e.emp_birth,
		    e.emp_gender,
		    e.emp_zipcode, 
		    e.emp_roadAddr, 
		    e.emp_detailAddr, 
		    e.emp_name,
		    e.reg_date, 
		    e.emp_quit,
		    e.emp_quit_date,
		    u.education, 
		    u.school_name, 
		    u.major,
		    d.dept_name,
    		c.common_type,
    		f.new_file_name,
    		f.extension;
	</select>
	
	<!-- 연차 검색 -->
	<select id="empLeaveIncdec" resultType="int">
		SELECT COALESCE(SUM(leave_incdec),0) FROM annual_leave WHERE emp_idx =#{param1}
	</select>
	
	<!-- 직원 업데이트 Emp 테이블 -->
	<update id="empModifyEmp">
		UPDATE employee e 
	  	<set>
	  	<if test="emp_birth != null">	  	
		   	e.emp_birth = #{emp_birth},
	  	</if>
	  	<if test="emp_phone != null">
		   	e.emp_phone = #{emp_phone},
		</if>
		<if test="emp_emergency_phone != null">
		   	e.emp_emergency_phone = #{emp_emergency_phone},
		</if>
		<if test="emp_ext_no != null">
		  	e.emp_ext_no =#{emp_ext_no},
		</if>
		<if test="gender != null">
			e.emp_gender=#{gender},
		</if>
		<if test="common_type != null">
		  	e.`position` = (SELECT common_idx FROM common WHERE common_type= #{common_type}),
		</if>
		<if test="dept_name != null">
		   	e.dept_id = #{dept_name},
		 </if>
		 e.update = #{update},
		 e.update_by=#{principal}
		 </set>
	   	WHERE 
	   		e.emp_idx =#{emp_idx}
	</update>
	<!-- 직원 학력 보유 여부 -->
	<select id="selectEdu" resultType="map">
		SELECT * FROM education WHERE emp_idx=#{emp_idx}
	</select>
	<!-- 직원 학력 업데이트 -->
	<update id="empModEduUpdate">
		UPDATE education u
		SET
			u.education =#{education},
			u.school_name =#{school_name},
			u.major =#{major},
			u.update = #{update},
			u.update_by = #{principal}
		WHERE 
			u.emp_idx =#{emp_idx}
	</update>
	<!-- 직원 학력 추가 -->
	<insert id="empModEduInsert">
	    INSERT INTO education (emp_idx, education, school_name, major, reg_by)
	    VALUES (#{emp_idx}, #{education}, #{school_name}, #{major},#{principal})
	</insert>
	
	<!-- 직원 퇴사 처리 -->
		<update id="delete">
			UPDATE employee 
			   SET
			   emp_quit ='Y',
			   emp_quit_date =#{param3},
			   `update` = #{param3},
			   update_by = #{param2}
			   WHERE 
			   emp_idx =#{param1}
		</update>
		
		<!-- 프로필 이미지 보유 여부 -->
		<select id="imgInfo" resultType="String">
			SELECT file_idx FROM file WHERE conn_idx =#{param1} AND file_type =74
		</select>
		<!-- 파일 보유 여부에 맞춰 삭제 -->
		<delete id="delImgInfo">
			DELETE FROM file WHERE file_idx =#{param1}
		</delete>
		
	<select id="selectDeptList" resultType="DeptDto">
		WITH RECURSIVE department_tree AS (
		  SELECT dept_id, parent_dept_id, dept_name, dept_delete, 0 AS depth, CAST(dept_id AS CHAR(200)) AS path
		  FROM department
		  WHERE parent_dept_id = 1
		  UNION ALL
		  SELECT d.dept_id, d.parent_dept_id, d.dept_name, d.dept_delete, dt.depth + 1, CONCAT(dt.path, ',', d.dept_id)
		  FROM department d
		  INNER JOIN department_tree dt ON d.parent_dept_id = dt.dept_id
		)
		SELECT dept_id,parent_dept_id,dept_name,depth,path
		FROM department_tree
		WHERE dept_delete LIKE 'N'
		ORDER BY path;
	</select>
	
	<select id="getLeaf" resultType="int">
		select count(dept_id)
		from department 
		where parent_dept_id = #{param1}
	</select>
	
	<select id="selectDeptEmpNum" resultType="int">
		SELECT count(dept_id) 
		FROM employee 
		WHERE dept_id = #{param1}
	</select>
	
	<insert id="insertDept">
		INSERT INTO department (parent_dept_id, dept_name, reg_by)
		VALUES(#{parentDeptId},#{deptName},#{regBy})
	</insert>
	
	<update id="deleteDept">
		UPDATE  department 
		SET update_by = #{param1}
		, `update` = curdate()
		, dept_delete = 'Y'
		WHERE dept_id=#{param2}
	</update>
	
	<select id="dept" resultType="com.ustore.employee.dto.EmployeeDto">
		SELECT *FROM department d WHERE dept_delete ='N'
	</select>
	
	<select id="selectChildDeptList">
		SELECT dept_id
		FROM department
		WHERE parent_dept_id = #{param1}
	</select>
</mapper>
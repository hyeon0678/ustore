<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ustore.approval.dao.ApprovalDao">

	<!-- jstree node에서 직원정보 가져오기 -->
	<select id="getEmployeeInfo" resultType="EmployeeDto">
		SELECT
		    e.*,
		    c.common_type AS positionType,
		    d.dept_name AS deptName
		FROM
		    employee e
		JOIN
		    common c ON e.position = c.common_idx
		JOIN
		    department d ON e.dept_id = d.dept_id
		WHERE
		    e.emp_idx = #{param1};
	</select>
	
	
	<!-- 새로 임시저장 -->
	<insert id="tempSaveContent" parameterType="ApprovalDto">
		<selectKey keyProperty="apprIdx" order="AFTER" resultType="Integer">
	       select lastval(appr_idx_sequence)
	    </selectKey>
	    
		<if test="commonIdx == 30">
            INSERT INTO business_draft (appr_idx, emp_idx, appr_subject, appr_content,  
            	appr_status, doc_step)
            VALUES (nextval(appr_idx_sequence), #{empIdx}, #{apprSubject}, #{apprContent}, 43, 1);
        </if>
        <if test="commonIdx == 31">
        	INSERT INTO payment_resolution (appr_idx, emp_idx, appr_subject,  
            	appr_status, doc_step, order_idx)
            VALUES (nextval(appr_idx_sequence), #{empIdx}, #{apprSubject}, 43, 1, #{orderIdx});            
        </if>
        <if test="commonIdx == 32">
            INSERT INTO req_vacation (appr_idx, emp_idx, appr_subject, 
                appr_status, doc_step, leave_type, leave_start_date, leave_end_date, leave_reason, leave_days)
            VALUES (nextval(appr_idx_sequence), #{empIdx}, #{apprSubject}, 43, 1, 
            	#{leaveType}, #{leaveStartDate}, #{leaveEndDate}, #{leaveReason}, #{leaveDays});
        </if>
	</insert>
	
	
	<!-- 임시저장된 문서 재저장시 중복되는 appr_idx찾기(중복값 있을시 아래의 update, 없을시 insert) -->
	<select id="chkRecordExists">
		SELECT count(*) 
		FROM(
		    SELECT appr_idx FROM business_draft WHERE appr_idx = #{apprIdx} AND appr_status = 43
		    UNION
		    SELECT appr_idx FROM payment_resolution WHERE appr_idx = #{apprIdx} AND appr_status = 43
		    UNION
		    SELECT appr_idx FROM req_vacation WHERE appr_idx = #{apprIdx} AND appr_status = 43
		) AS CombinedResult;
	</select>
	
	
	<!-- 임시저장된 문서 다시 재저장 -->
	<update id="updateTempDoc" parameterType="ApprovalDto">
		<if test="commonIdx == 30">
            UPDATE business_draft SET appr_subject=#{apprSubject}, appr_content=#{apprContent}, appr_submit_date=now()	
            WHERE appr_idx=#{apprIdx}            	
	    </if>
        <if test="commonIdx == 31">
	        UPDATE payment_resolution SET appr_subject=#{apprSubject}, order_idx=#{orderIdx}, appr_submit_date=now()
            WHERE appr_idx=#{apprIdx}            	
	    </if>
        <if test="commonIdx == 32">
	        UPDATE req_vacation SET appr_subject=#{apprSubject}, leave_type=#{leaveType},
	        	leave_start_date=#{leaveStartDate},leave_end_date=#{leaveEndDate},leave_reason=#{leaveReason}, appr_submit_date=now()
	        WHERE appr_idx=#{apprIdx}
	    </if>
	</update>
	
	
	<!-- 임시저장되었던 결재선과 수신자를 수정할시 초기화하기 위한 작업 -->
	<delete id="delTempApprLine">
		DELETE FROM approval_line WHERE appr_idx = #{apprIdx}
	</delete>
	
	<delete id="delTempRecv">
		DELETE FROM recipient WHERE appr_idx = #{apprIdx}
	</delete>
	
	
	<!-- 결재 상신 -->   
	<insert id="saveContent" parameterType="ApprovalDto">
		<selectKey keyProperty="apprIdx" order="AFTER" resultType="Integer">
	       select lastval(appr_idx_sequence)  
	       <!-- selectKey안에는 마지막으로 생성된 키 값이 들어가고, order가 after니깐 이 쿼리가 실행된 후에 selectKey가 생성 -->
	       <!-- 이 쿼리를 insert할때 appr_idx에 마지막 생성된 값 다음 값이 들어가고, insert종료 후에 appr_idx 값이 selectKey에 들어가니깐 중복안되고 맞는것같은데 -->
	    </selectKey>
		<if test="commonIdx == 30">
            INSERT INTO business_draft (appr_idx, emp_idx, appr_subject, appr_content,  
            	appr_status, doc_step)
            VALUES (nextval(appr_idx_sequence), #{empIdx}, #{apprSubject}, #{apprContent}, 40, 1)
        </if>
        <if test="commonIdx == 31">
        	INSERT INTO payment_resolution (appr_idx, emp_idx, appr_subject,  
            	appr_status, doc_step, order_idx)
            VALUES (nextval(appr_idx_sequence), #{empIdx}, #{apprSubject}, 40, 1, #{orderIdx})            
        </if>
        <if test="commonIdx == 32">
            INSERT INTO req_vacation (appr_idx, emp_idx, appr_subject, 
                appr_status, doc_step, leave_type, leave_start_date, leave_end_date, leave_reason, leave_days)
            VALUES (nextval(appr_idx_sequence), #{empIdx}, #{apprSubject}, 40, 1, 
            	#{leaveType}, #{leaveStartDate}, #{leaveEndDate}, #{leaveReason}, #{leaveDays})
        </if>
	</insert>	
		
		
	<!-- 결재선 저장 -->	
	<insert id="saveApprLine" parameterType="ApprovalDto">    
	        INSERT INTO approval_line (emp_idx, appr_idx, approver, appr_order, appr_confirm, appr_type)
	        VALUES (#{empIdx}, #{apprIdx}, #{approver}, #{apprOrder}, #{apprConfirm}, #{apprType})
	</insert>
	
	
	<!-- 수신자 저장 -->
	<insert id="saveApprRecv" parameterType="ApprovalDto">		    
	        INSERT INTO recipient (emp_idx, appr_idx, receiver)
	        VALUES (#{empIdx}, #{apprIdx}, #{receiver})	    
	</insert>
	
	<!-- 결재 상신시 결재일자 update(이후 결재버튼 누르면 해당 결재자의 결재일자 update) -->
	<update id="updateApprDate">
		UPDATE approval_line SET appr_date = now()
		WHERE appr_idx = #{apprIdx} AND emp_idx = #{empIdx}
	</update>
	
	<!-- 임시저장 문서 list가져오기 -->
	<select id="getTempList" resultType="ApprovalDto">
		SELECT appr_idx, appr_subject, appr_status, appr_type_idx, appr_submit_date
		FROM business_draft
		WHERE emp_idx = #{emp_idx} AND appr_status = 43
		UNION
		SELECT appr_idx, appr_subject, appr_status, appr_type_idx, appr_submit_date
		FROM payment_resolution
		WHERE emp_idx = #{emp_idx} AND appr_status = 43
		UNION
		SELECT appr_idx, appr_subject, appr_status, appr_type_idx, appr_submit_date
		FROM req_vacation
		WHERE emp_idx = #{emp_idx} AND appr_status = 43		
		ORDER BY appr_submit_date DESC
	</select>	
	
	
	<!-- 문서 detail 결재선 가져오기 -->
	<select id="getApprLine" resultType="map" parameterType="int">
		SELECT al.emp_idx, al.appr_type, al.approver, c.common_type AS positionType, d.dept_name, al.appr_order, al.appr_confirm, al.comment, al.appr_date 
	    FROM approval_line al
	    JOIN employee e ON al.approver = e.emp_name
	    LEFT JOIN department d ON e.dept_id = d.dept_id
	    LEFT JOIN common c ON e.position = c.common_idx
	    WHERE al.appr_idx = #{param1}
	    ORDER BY al.appr_order
	</select>
	
	
	<!-- 문서 detail 수신자 가져오기 -->
	<select id="getRecv" resultType="map" parameterType="int">
		SELECT r.emp_idx, r.receiver, c.common_type AS positionType, d.dept_name 
	    FROM recipient r
	    JOIN employee e ON r.receiver = e.emp_name
	    LEFT JOIN department d ON e.dept_id = d.dept_id
	    LEFT JOIN common c ON e.position = c.common_idx
	    WHERE r.appr_idx = #{param1}
	</select>
	
	
	<!-- 문서 detail 내용 가져오기 -->
	<select id="getContent" resultType="ApprovalDto" parameterType="int">
		<if test="common_idx == 30">
            SELECT appr_subject, appr_content, appr_status, doc_step 
            FROM business_draft
            WHERE appr_idx=#{param1}
        </if>
        <if test="common_idx == 31">
        	SELECT appr_subject, appr_status, doc_step, order_idx 
        	FROM payment_resolution          
        	WHERE appr_idx=#{param1}
        </if>
        <if test="common_idx == 32">
            SELECT appr_subject, appr_status, doc_step, leave_type, leave_start_date, 
            	leave_end_date, leave_reason, leave_days 
            FROM req_vacation
            WHERE appr_idx=#{param1}
        </if>
	</select>
	
	
	<!-- 대금지급결의서 발주번호 검색(modal) -> 특정 일자의 발주번호 리스트 가져오기 / 결재진행중이거나 결재완료된 번호는 안가져옴 -->
	<select id="getOrderNumList" resultType="OrderDto">
		SELECT DISTINCT o.order_date, o.order_idx, e.emp_name 
		FROM `order` o
		JOIN order_detail od ON o.order_idx = od.order_idx 
		JOIN employee e ON o.emp_idx = e.emp_idx
		LEFT JOIN payment_resolution pr ON o.order_idx = pr.order_idx
		WHERE o.order_date =#{orderDate} 
			AND od.conf_status = 'Y' 
			AND pr.appr_status not in (40, 41)
		ORDER BY o.order_date DESC
	</select>
	
	<!-- 발주번호에 대한 세부 내용 가져오기(품명, 주문량, 단가 등) -->
	<select id="getOrderProductList" resultType="OrderDto">
		SELECT DISTINCT od.purchase_price, (od.quantity-COALESCE(od.return_quantity, 0)) as netQuantity, p.product_name, p.unit_quantity, (od.purchase_price*p.unit_quantity*(od.quantity - COALESCE(od.return_quantity, 0))) as totalPricePerProduct
		FROM `order` o
		JOIN order_detail od ON o.order_idx = od.order_idx 
		JOIN products p on od.product_id = p.product_id 
		WHERE o.order_idx =#{orderIdx};
	</select>
	
	<!-- 내결재문서(내가 결재 올린 문서) list가져오기 -->
	<select id="getMyApprList" resultType="ApprovalDto">
		SELECT appr_idx, appr_subject, appr_status, appr_type_idx, appr_submit_date, ifnull(doc_id,'') AS doc_id
		FROM business_draft
		WHERE emp_idx = #{emp_idx} AND appr_status in (40, 41, 42)
		UNION
		SELECT appr_idx, appr_subject, appr_status, appr_type_idx, appr_submit_date, ifnull(doc_id,'') AS doc_id
		FROM payment_resolution
		WHERE emp_idx = #{emp_idx} AND appr_status in (40, 41, 42)
		UNION
		SELECT appr_idx, appr_subject, appr_status, appr_type_idx, appr_submit_date, ifnull(doc_id,'') AS doc_id
		FROM req_vacation
		WHERE emp_idx = #{emp_idx} AND appr_status in (40, 41, 42)		
		ORDER BY appr_submit_date DESC
	</select>	
	
	<!-- 결재문서 회수하기 -->
	<update id="retrieveAppr">
		<if test="common_idx == 30">
		UPDATE business_draft
		SET appr_status = 43 
		WHERE appr_idx = #{apprIdx}
		</if>
        <if test="common_idx == 31">
        UPDATE payment_resolution
		SET appr_status = 43 
		WHERE appr_idx = #{apprIdx}
        </if>
        <if test="common_idx == 32">
        UPDATE req_vacation
		SET appr_status = 43 
		WHERE appr_idx = #{apprIdx}
        </if>
	</update>
	
	
	<!-- 결재요청 문서(내 결재순서인 문서) list가져오기 -->
	<select id="getReqApprList" resultType="ApprovalDto">
		SELECT appr_idx, appr_subject, appr_status, appr_type_idx, appr_submit_date, emp_name, dept_name
		FROM (SELECT bd.appr_idx, bd.appr_subject, bd.appr_status, bd.appr_type_idx, bd.appr_submit_date, e.emp_name, d.dept_name
			FROM business_draft bd
			INNER JOIN approval_line al ON al.appr_idx = bd.appr_idx AND al.emp_idx= #{emp_idx} AND al.appr_type!='기안' AND appr_confirm = '0' AND al.appr_order = bd.doc_step
			INNER JOIN employee e ON e.emp_idx = bd.emp_idx
			INNER JOIN department d ON e.dept_id = d.dept_id
			WHERE bd.appr_status = 40					
			UNION
			SELECT pr.appr_idx, pr.appr_subject, pr.appr_status, pr.appr_type_idx, pr.appr_submit_date, e.emp_name, d.dept_name
			FROM payment_resolution pr
			INNER JOIN approval_line al ON al.appr_idx = pr.appr_idx AND al.emp_idx= #{emp_idx} AND al.appr_type!='기안' AND appr_confirm = '0' AND al.appr_order = pr.doc_step
			INNER JOIN employee e ON e.emp_idx = pr.emp_idx
			INNER JOIN department d ON e.dept_id = d.dept_id
			WHERE pr.appr_status = 40
			UNION		
			SELECT rv.appr_idx, rv.appr_subject, rv.appr_status, rv.appr_type_idx, rv.appr_submit_date, e.emp_name, d.dept_name
			FROM req_vacation rv
			INNER JOIN approval_line al ON al.appr_idx = rv.appr_idx AND al.emp_idx= #{emp_idx} AND al.appr_type!='기안' AND appr_confirm = '0' AND al.appr_order = rv.doc_step
			INNER JOIN employee e ON e.emp_idx = rv.emp_idx
			INNER JOIN department d ON e.dept_id = d.dept_id
			WHERE rv.appr_status = 40
			)AS combined_result			
		ORDER BY appr_submit_date DESC
	</select>
	
	<!-- 결재하기 -->
	<update id="updateAppr" parameterType="ApprovalDto">
		<if test="commonIdx == 30">
		UPDATE approval_line al
		INNER JOIN business_draft bd ON bd.appr_idx = al.appr_idx AND bd.doc_step = al.appr_order
		SET al.appr_confirm="1", al.appr_date = now()
		WHERE bd.appr_idx = #{apprIdx}
		</if>
        <if test="commonIdx == 31">
        UPDATE approval_line al
		INNER JOIN payment_resolution pr ON pr.appr_idx = al.appr_idx AND pr.doc_step = al.appr_order
		SET al.appr_confirm="1", al.appr_date = now()
		WHERE pr.appr_idx = #{apprIdx}
        </if>
        <if test="commonIdx == 32">
        UPDATE approval_line al
		INNER JOIN req_vacation rv ON rv.appr_idx = al.appr_idx AND rv.doc_step = al.appr_order
		SET al.appr_confirm="1", al.appr_date = now()
		WHERE rv.appr_idx = #{apprIdx}
		</if>
	</update>
	
	<!-- 남은 결재자 있는지 확인 -->
	<select id="chkRemainApprover" parameterType="ApprovalDto" resultType="int">
		SELECT count(approver)
		FROM approval_line 
		WHERE appr_idx=#{apprIdx} AND appr_confirm=0
	</select>
	
	<!-- 결재문서의 상태 update(남은 결재자 없을시 결재완료 처리(apprStatus = 41), 문서번호 생성) -->
	<update id="updateApprStatus" parameterType="ApprovalDto">
		<if test="commonIdx == 30">
			UPDATE business_draft
            SET appr_status = #{apprStatus}, doc_id = #{docId}
            WHERE appr_idx = #{apprIdx}
        </if>
        <if test="commonIdx == 31">
        	UPDATE payment_resolution
            SET appr_status = #{apprStatus}, doc_id = #{docId}
            WHERE appr_idx = #{apprIdx}
        </if>
        <if test="commonIdx == 32">
        	UPDATE req_vacation
            SET appr_status = #{apprStatus}, doc_id = #{docId}
            WHERE appr_idx = #{apprIdx}
        </if>
	</update>
	
	<!-- 결재문서의 상태 update(남은 결재자 있을시) -->
	<update id="updateApprDocStep" parameterType="ApprovalDto">
		<if test="commonIdx == 30">
			UPDATE business_draft
			SET doc_step=doc_step+1 
			WHERE appr_idx = #{apprIdx}
		</if>
        <if test="commonIdx == 31">
	        UPDATE payment_resolution
			SET doc_step=doc_step+1
			WHERE appr_idx = #{apprIdx}
		</if>
        <if test="commonIdx == 32">
        	UPDATE req_vacation
			SET doc_step=doc_step+1
			WHERE appr_idx = #{apprIdx}
		</if>
	</update>
	
	<!-- 최종 결재자 결재일자 가져오기(문서번호 생성을 위해 연도만 뽑아내기 위함) -->
	<select id="getFnApprDate" resultType="java.sql.Timestamp">
		SELECT appr_date 
		FROM approval_line
		WHERE emp_idx=#{fnApprEmp_idx} AND appr_idx=#{apprIdx}
	</select>
	
	<!-- 최종결재일자 연도와 부서명이 같은 문서번호의 뒤의 숫자 4자리 max값 가져오기 -->
	<select id="getMaxDocId" resultType="String">
		SELECT MAX(doc_id)
		FROM (
		    SELECT doc_id
		    FROM business_draft bd
		    WHERE LEFT(doc_id, 4) = #{fnApprYear} AND SUBSTRING_INDEX(SUBSTRING_INDEX(doc_id, '-', 2), '-', -1) = #{iniDeptName}    
		    UNION    
		    SELECT doc_id
		    FROM payment_resolution pr
		    WHERE LEFT(doc_id, 4) = #{fnApprYear} AND SUBSTRING_INDEX(SUBSTRING_INDEX(doc_id, '-', 2), '-', -1) = #{iniDeptName}    
		    UNION    
		    SELECT doc_id
		    FROM req_vacation rv
		    WHERE LEFT(doc_id, 4) = #{fnApprYear} AND SUBSTRING_INDEX(SUBSTRING_INDEX(doc_id, '-', 2), '-', -1) = #{iniDeptName}
		    )AS combined_result;
	</select>
	
	<!-- 반려하기 -->
	<update id="rejectApprDoc">		
		<if test="common_idx == 30">
		UPDATE approval_line al
		INNER JOIN business_draft bd ON bd.appr_idx = al.appr_idx AND bd.doc_step = al.appr_order
		SET bd.appr_status=42, al.comment=#{comment}, al.appr_confirm='2', al.appr_date = now()
		WHERE bd.appr_idx = #{apprIdx}
		</if>
        <if test="common_idx == 31">
        UPDATE approval_line al
        INNER JOIN payment_resolution pr ON pr.appr_idx = al.appr_idx AND pr.doc_step = al.appr_order
		SET pr.appr_status=42, al.comment=#{comment}, al.appr_confirm='2', al.appr_date = now()
		WHERE pr.appr_idx = #{apprIdx}
        </if>
        <if test="common_idx == 32">
        UPDATE approval_line al
        INNER JOIN req_vacation rv ON rv.appr_idx = al.appr_idx AND rv.doc_step = al.appr_order
		SET rv.appr_status=42, al.comment=#{comment}, al.appr_confirm='2', al.appr_date = now()
		WHERE rv.appr_idx = #{apprIdx}
		</if>
	</update>
	
	
	<!-- 부서문서(결재완료문서) list가져오기 -->
	<select id="getTeamApprList" resultType="ApprovalDto">
		SELECT distinct bd.appr_idx, bd.appr_subject, bd.appr_status, bd.appr_type_idx, bd.emp_idx, bd.doc_id, DATE_FORMAT(al.appr_date, '%Y-%m-%d') as appr_date, d2.dept_name, drafter.emp_name
		FROM business_draft bd
		JOIN employee drafter ON bd.emp_idx = drafter.emp_idx
		LEFT JOIN approval_line al ON bd.appr_idx = al.appr_idx
		LEFT JOIN recipient r ON bd.appr_idx = r.appr_idx
		LEFT JOIN employee receiver ON r.emp_idx = receiver.emp_idx
		LEFT JOIN department d2 ON d2.dept_id = drafter.dept_id 
		WHERE bd.appr_status = 41
		  AND (drafter.dept_id = #{deptId}
		       OR drafter.emp_idx = #{emp_idx}
		       OR r.emp_idx = #{emp_idx}
		       OR receiver.dept_id = #{deptId})
		union
		SELECT distinct pr.appr_idx, pr.appr_subject, pr.appr_status, pr.appr_type_idx, pr.emp_idx, pr.doc_id, DATE_FORMAT(al.appr_date, '%Y-%m-%d') as appr_date, d3.dept_name, drafter2.emp_name
		FROM payment_resolution pr
		JOIN employee drafter2 ON pr.emp_idx = drafter2.emp_idx
		LEFT JOIN approval_line al ON pr.appr_idx = al.appr_idx
		LEFT JOIN recipient r ON pr.appr_idx = r.appr_idx
		LEFT JOIN employee receiver ON r.emp_idx = receiver.emp_idx
		LEFT JOIN department d3 ON d3.dept_id = drafter2.dept_id 
		WHERE pr.appr_status = 41
		  AND (drafter2.dept_id = #{deptId}
		       OR drafter2.emp_idx = #{emp_idx}
		       OR r.emp_idx = #{emp_idx}
		       OR receiver.dept_id = #{deptId})
		union
		SELECT distinct rv.appr_idx, rv.appr_subject, rv.appr_status, rv.appr_type_idx, rv.emp_idx, rv.doc_id, DATE_FORMAT(al.appr_date, '%Y-%m-%d') as appr_date, d4.dept_name, drafter3.emp_name
		FROM req_vacation rv
		JOIN employee drafter3 ON rv.emp_idx = drafter3.emp_idx
		LEFT JOIN approval_line al ON rv.appr_idx = al.appr_idx
		LEFT JOIN recipient r ON rv.appr_idx = r.appr_idx
		LEFT JOIN employee receiver ON r.emp_idx = receiver.emp_idx
		LEFT JOIN department d4 ON d4.dept_id = drafter3.dept_id 
		WHERE rv.appr_status = 41
		  AND (drafter3.dept_id = #{deptId}
		       OR drafter3.emp_idx = #{emp_idx}
		       OR r.emp_idx = #{emp_idx}
		       OR receiver.dept_id = #{deptId})
		GROUP BY appr_idx
	    ORDER BY appr_date DESC, doc_id DESC
	</select>
	
	<!-- 점장이 로그인시 전체 결재완료 문서 가져오기 -->
	<select id="getAllApprList" resultType="ApprovalDto">
		SELECT distinct * 
		FROM(
			SELECT distinct bd.appr_idx, bd.appr_subject, bd.appr_status, bd.appr_type_idx, bd.emp_idx, bd.doc_id, DATE_FORMAT(al.appr_date, '%Y-%m-%d') as appr_date, d2.dept_name, drafter.emp_name
			FROM business_draft bd
			JOIN employee drafter ON bd.emp_idx = drafter.emp_idx
			LEFT JOIN approval_line al ON bd.appr_idx = al.appr_idx
			LEFT JOIN recipient r ON bd.appr_idx = r.appr_idx
			LEFT JOIN employee receiver ON r.emp_idx = receiver.emp_idx
			LEFT JOIN department d2 ON d2.dept_id = drafter.dept_id 
			WHERE bd.appr_status = 41
			union
			SELECT distinct pr.appr_idx, pr.appr_subject, pr.appr_status, pr.appr_type_idx, pr.emp_idx, pr.doc_id, DATE_FORMAT(al.appr_date, '%Y-%m-%d') as appr_date, d2.dept_name, drafter.emp_name
			FROM payment_resolution pr
			JOIN employee drafter ON pr.emp_idx = drafter.emp_idx
			LEFT JOIN approval_line al ON pr.appr_idx = al.appr_idx
			LEFT JOIN recipient r ON pr.appr_idx = r.appr_idx
			LEFT JOIN employee receiver ON r.emp_idx = receiver.emp_idx
			LEFT JOIN department d2 ON d2.dept_id = drafter.dept_id 
			WHERE pr.appr_status = 41
			union
			SELECT distinct rv.appr_idx, rv.appr_subject, rv.appr_status, rv.appr_type_idx, rv.emp_idx, rv.doc_id, DATE_FORMAT(al.appr_date, '%Y-%m-%d') as appr_date, d2.dept_name, drafter.emp_name
			FROM req_vacation rv
			JOIN employee drafter ON rv.emp_idx = drafter.emp_idx
			LEFT JOIN approval_line al ON rv.appr_idx = al.appr_idx
			LEFT JOIN recipient r ON rv.appr_idx = r.appr_idx
			LEFT JOIN employee receiver ON r.emp_idx = receiver.emp_idx
			LEFT JOIN department d2 ON d2.dept_id = drafter.dept_id 
			WHERE rv.appr_status = 41) as combined_results
		GROUP BY appr_idx 
		ORDER BY appr_date DESC;
	</select>

	<!-- 임시저장 문서 삭제하기 -->
	<delete id="tempDocDel">
		<if test="common_idx == 30">
		DELETE FROM business_draft
		WHERE appr_idx = #{apprIdx}
		</if>
        <if test="common_idx == 31">
        DELETE FROM payment_resolution
		WHERE appr_idx = #{apprIdx}
        </if>
        <if test="common_idx == 32">
        DELETE FROM req_vacation
		WHERE appr_idx = #{apprIdx}
		</if>
	</delete>
	
	<!-- 기안자의 휴가신청 기안문 정보 가지고오기(결재완료시 신청일수 연차에서 차감 및 스케쥴에 반영 위함) -->
	<select id="getEmpLeaveInfo" resultType="ApprovalDto">
		SELECT * FROM req_vacation WHERE appr_idx = #{apprIdx} AND emp_idx = #{drafterEmpIdx}
	</select>
	
	<!-- 기안자의 총 잔여 연차갯수 가지고 오기 -->
	<select id="getTotalLeaveDays" resultType="int">
		SELECT leave_incdec FROM annual_leave WHERE emp_idx = #{drafterEmpIdx}
		ORDER BY leave_date DESC
		LIMIT 1
	</select>
	
	<!-- 결재받은 휴가신청서의 연차타입이 연차일때 연차히스토리 테이블에 업데이트(연차 차감) -->
	<insert id="insertAnnualLeaveInfo">
		INSERT INTO annual_leave
		(emp_idx, leave_date, leave_type, leave_incdec, reg_by)
		VALUES (#{drafterEmpIdx}, #{date}, #{leaveType}, #{totalLeaveDays}, #{drafterEmpIdx})
	</insert>
	
	<!-- 결재받은 휴가신청서의 연차타입이 연차 외의 항목(병가, 공가)일때 연차히스토리 테이블에 업데이트(연차 미차감) -->
	<insert id="insertOtherLeaveInfo">
		INSERT INTO annual_leave
		(emp_idx, leave_date, leave_type, leave_incdec, reg_by)
		VALUES (#{drafterEmpIdx}, #{date}, #{leaveType}, #{totalLeaveDays}, #{drafterEmpIdx})
	</insert>


</mapper>